import GameServer.Commands
import Game.Levels.Propositional.L07_ModusPonens

open Propositional

namespace Predicate

World "Predicate"
Level 9
Title "Existential + Universal"

Introduction "
Let‚Äôs combine **existential** and **universal** logic with a conjunction.

You are given:

- `‚àÉ w, P w` ‚Äî There exists some `w` such that `P w` holds
- `‚àÄ w, P w ‚Üí Q w` ‚Äî For all `w`, if `P w` holds, then `Q w` also holds

Your goal is to prove:

`‚àÉ w, P w ‚àß Q w` ‚Äî There exists some `w` such that both `P w` and `Q w` are true.

We‚Äôll do this using the constructors `And.intro` and `Exists.intro`.
"

/--
Constructs a proof of `P ‚àß Q` given proofs of `P` and `Q`.
-/
TheoremDoc And.intro as "And.intro" in "Predicate"

Statement {Œ± : Type} (P Q : Œ± ‚Üí Prop)
(h‚ÇÅ : ‚àÉ w, P w)
(h‚ÇÇ : ‚àÄ w, P w ‚Üí Q w) :
‚àÉ w, P w ‚àß Q w := by

Hint "We want to extract a specific witness from the existential statement `h‚ÇÅ`.

Use `cases h‚ÇÅ` to pull out:

a value `w : Œ±`

and a proof `h : P w`"
cases h‚ÇÅ

Hint "From `h‚ÇÇ : ‚àÄ w, P w ‚Üí Q w`, you can specialize it to the specific `w` using:

`have hPwtQw : P w ‚Üí Q w := h‚ÇÇ w`
This gives you a conditional statement just for this particular `w`."

have hPwtQw : P w ‚Üí Q w := h‚ÇÇ w

Hint "Now apply Modus Ponens.

You have:

`P w ‚Üí Q w` as `hPwtQw`

`P w` as `h`

So you can deduce `Q w` as `hQw` with the `have` tactic."

have hQw : Q w := modus_ponens hPwtQw h

Hint "Now you have both `P w` and `Q w`.

You can combine them using `And.intro h hQw` to get `P w ‚àß Q w`.

Then use `Exists.intro w (...)` to finish the proof:
```lean
exact Exists.intro w (And.intro h hQw)
```"

exact Exists.intro w (And.intro h hQw)

NewTheorem And.intro
Conclusion "
Awesome! üéâ

You used:

`cases` to extract a witness from an existential

A universal implication to derive new information

`And.intro` to build a conjunction

`Exists.intro` to reintroduce the existential

These steps form a solid foundation for more advanced logic proofs ahead.
"

end Predicate
