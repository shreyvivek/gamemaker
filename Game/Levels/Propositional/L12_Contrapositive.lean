import GameServer.Commands
import Game.Levels.Propositional.L11_ModusTollens
namespace Propositional

World "Propositional"
Level 12
Title "Contrapositive"

Introduction "
You may remember that every implication `P â†’ Q`
is **logically equivalent** to its contrapositive: `Â¬Q â†’ Â¬P`.

This means:
> If `P â†’ Q`, then `Â¬Q â†’ Â¬P` is also true.

Youâ€™ve already seen this idea in Level 11 (Modus Tollens):
- If `P â†’ Q` and `Q` is false, then `P` must be false.

In this level, youâ€™re going to prove the general version:
Given only `P â†’ Q`, show that `Â¬Q â†’ Â¬P`.

Letâ€™s unpack this step by step.
"




/-- From `P â†’ Q`, derive `Â¬Q â†’ Â¬P`. -/
TheoremDoc Propositional.contrapositive_equiv as "Contrapositive" in "Propositional"

Statement contrapositive_equiv (P Q : Prop) (h : P â†’ Q) : Â¬Q â†’ Â¬P := by
  Hint "To prove `Â¬Q â†’ Â¬P`, first recognize that it's shorthand for `(Q â†’ False) â†’ (P â†’ False)`."
  Hint "That means this is a **nested implication**, so weâ€™ll need to assume both `Â¬Q` and `P` before we can prove `False`."
  intro not_q
  Hint "`not_q` now holds: youâ€™re assuming `Q â†’ False`. Now to prove `Â¬P`, we must show `P â†’ False` â€” so assume `P` next via `intro assumed_p`."
  intro assumed_p
  Hint "Your goal is now `False`. Think: how do you reach a contradiction from `P`?"
  Hint "You have `h : P â†’ Q`, and you also assumed `P` as `assumed_p`. So, from those two, you can get `Q`."
  Hint "But your goal is `False`, and you have `not_q : Q â†’ False`. This gives you a strategy: apply `not_q` to change the goal to a proof of `Q`."
  apply not_q
  Hint "You now need to prove `Q`, and you have `h : P â†’ Q` and `assumed_p : P`. This is a perfect setup for `apply` again."
  apply h
  Hint "Now the goal is `P`, and you already have `assumed_p : P`. Use `exact assumed_p` to finish."
  exact assumed_p


NewTheorem Propositional.modus_tollens
Conclusion "
Awesome! You've just proven the **contrapositive** form of an implication â€” an essential logical equivalence.

Though this level was heavy on hints, it brought together everything youâ€™ve learned:
- You used `intro` to build nested assumptions
- You used `apply` to break apart implications
- And you combined all the pieces to reach a contradiction

This is real formal logic â€” and you're solving it in Lean. ðŸ”¥
"

end Propositional
