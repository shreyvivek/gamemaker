msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Sun Jun 15 16:57:42 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Modus Ponens"
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "From P ‚Üí Q and P, we can conclude Q. This is known as Modus Ponens."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Solves the current goal by using a function or theorem.\n"
"\n"
"If your goal is `Q` and you have `P ‚Üí Q`, then `apply` turns the goal into proving `P`.\n"
"It's like saying: ‚ÄúTo prove `Q`, it's enough to prove `P`.‚Äù"
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Closes the current goal using the term you provide ‚Äî the term must exactly match the goal.\n"
"\n"
"For example, if your goal is `P` and you have a proof of `P` (say, `h : P`), then `exact h` solves the goal."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Modus Ponens: from P ‚Üí Q and P, we can conclude Q."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "You've proven Modus Ponens: from P ‚Üí Q and P, you can conclude Q."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "And Commutativity"
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "In this level, you will prove the commutativity of the logical operator AND"
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "Solves the current goal by using a function or theorem.\n"
"\n"
"If your goal is `Q` and you have `P ‚Üí Q`, then `apply` turns the goal into proving `P`.\n"
"It's like saying: ‚ÄúTo prove `Q`, it's enough to prove `P`.‚Äù"
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "Closes the goal by providing a term that exactly matches the goal.\n"
"\n"
"If your goal is `P` and you already have `h : P`, then `exact h` finishes the proof."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "To prove `P ‚àß Q`, it suffices to prove both `P` and `Q` separately.\n"
"\n"
"This constructor builds a conjunction from two proofs."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "And Commutativity: from P ‚àß Q, we can conclude Q ‚àß P."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "Conjunction is commutative. You can always flip the two parts of a logical AND."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "Modus Tollens"
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "From P ‚Üí Q and ¬¨Q, we can conclude ¬¨P. This is known as Modus Tollens."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "The `intro` tactic is used when your goal is something like \"if P then Q\" (`P ‚Üí Q`) or \"for all x, P(x)\" (`‚àÄ x, P(x)`).\n"
"\n"
"Think of it like this: when you're trying to prove a statement that starts with ‚ÄúAssume that...‚Äù, you can use `intro` to take that assumption into your hands.\n"
"\n"
"For example, if your goal is: `P ‚Üí Q`\n"
"then doing: `intro h`\n"
"says: ‚ÄúLet‚Äôs assume `P` is true, and call this assumption `h`.‚Äù Now your goal is just to prove `Q`, using the fact that you have `h : P`.\n"
"\n"
"In the case of a universal quantifier: `‚àÄ x, P(x)`\n"
"then doing: `intro x`\n"
"means: ‚ÄúLet `x` be an arbitrary value,‚Äù and now the goal becomes `P(x)`.\n"
"\n"
"It‚Äôs one of the most basic and useful tactics in Lean, especially at the beginning of a proof. Use it to introduce assumptions or variables from the goal into your working context."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "Modus Tollens: from P ‚Üí Q and ¬¨Q, we can conclude ¬¨P."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "You've proven Modus Tollens: from P ‚Üí Q and ¬¨Q, you can conclude ¬¨P."
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "Propositional Logic"
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "In this world, you'll explore the foundations of propositional logic.\n"
"\n"
"Each level presents a new fundamental theorem or principle."
msgstr ""

#: Game
msgid "Discrete Math with Lean4"
msgstr ""

#: Game
msgid "Welcome to **Discrete Math with Lean4**, a fun and interactive game that will help you in proving several theorems **MH1812 - Discrete Mathematics**\n"
"\n"
"There are several levels that you can try out. Each level essentially covers the content taught in each topic. For instance,\n"
"Level 2 would cover content taught in Topic 2."
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels, if you are keen to learn more about Lean4."
msgstr ""
