msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Tue Jun 24 15:21:11 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Modus Ponens"
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "From $P ightarrow Q$ and $P$, we can conclude $Q$.\n"
"This rule of inference is known as **Modus Ponens**."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Solves the current goal by using a function or theorem.\n"
"\n"
"If your goal is `Q` and you have `P ‚Üí Q`, then `apply` turns the goal into proving `P`.\n"
"It's like saying: ‚ÄúTo prove `Q`, it's enough to prove `P`.‚Äù"
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "rewrites stuff"
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Closes the current goal using the term you provide ‚Äî the term must exactly match the goal.\n"
"\n"
"For example, if your goal is `P` and you have a proof of `P` (say, `h : P`), then `exact h` solves the goal."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Modus Ponens: from `P ‚Üí Q` and `P`, we can conclude `Q`."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Use the `apply` tactic with the implication `¬´{h‚ÇÅ}¬ª` to turn your goal `Q` into `P`."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "Now you have a goal `P`, and you already have `¬´{h‚ÇÇ}¬ª : P` ‚Äî use `exact` to finish."
msgstr ""

#: Game.Levels.Propositional.L01_ModusPonens
msgid "You've successfully proven **Modus Ponens**: from $P ightarrow Q$ and $P$, you can conclude $Q$."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "And Commutativity"
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "In this level, you will prove the **commutativity** of the logical AND operator:\n"
"If you know `P ‚àß Q`, then you can conclude `Q ‚àß P`."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "To prove `P ‚àß Q`, it suffices to prove both `P` and `Q` separately.\n"
"\n"
"This constructor builds a conjunction from two proofs."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "And Commutativity: from `P ‚àß Q`, we can conclude `Q ‚àß P`."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "You want to prove a conjunction ‚Äî use `apply And.intro`."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "Now prove the right side of the original conjunction, which is `Q`. Use `exact h.right`."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "Now finish by proving `P` using `h.left`."
msgstr ""

#: Game.Levels.Propositional.L02_AndComm
msgid "You've proven that logical AND is **commutative** ‚Äî from `P ‚àß Q`, you can always derive `Q ‚àß P`."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "Modus Tollens"
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "From `P ‚Üí Q` and `¬¨Q`, we can conclude `¬¨P` easily.\n"
"This classic form of reasoning is called **Modus Tollens**."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "The `intro` tactic is used when your goal is something like an implication (`P ‚Üí Q`) or a universal quantifier (`‚àÄ x, P(x)`).\n"
"\n"
"- Use `intro h` to assume `P` when trying to prove `P ‚Üí Q`.\n"
"- Use `intro x` to assume an arbitrary value when trying to prove `‚àÄ x, P(x)`.\n"
"\n"
"It‚Äôs like saying ‚ÄúAssume this is true...‚Äù and using it in the proof."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "Modus Tollens: From `P ‚Üí Q` and `¬¨Q`, we can conclude `¬¨P`."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "You want to prove `¬¨P`. That means: assume `P` and show a contradiction. Try `intro`."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "Now apply the implication `h‚ÇÅ : P ‚Üí Q` to your assumption `hP`."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "Use `exact` to supply `Q`, which you got from applying the implication."
msgstr ""

#: Game.Levels.Propositional.L03_ModusTollens
msgid "You've proven **Modus Tollens**:\n"
"Given `P ‚Üí Q` and `¬¨Q`, it must follow that `¬¨P`."
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "Propositional Logic"
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "In this world, you'll explore the foundations of propositional logic.\n"
"\n"
"Each level presents a new fundamental theorem or principle.\n"
"\n"
"Click on the button at the bottom left to continue."
msgstr ""

#: Game
msgid "Discrete Mathematics with Lean4"
msgstr ""

#: Game
msgid "Welcome to **Discrete Math with Lean4**, a fun and interactive game that will help you in proving several theorems **MH1812 - Discrete Mathematics**\n"
"\n"
"There are several levels that you can try out in each world. Each level essentially covers a theorem taught in the lecture. And you have many such levels queued up in a world.\n"
"Start by clicking on **Propositional** on the right."
msgstr ""

#: Game
msgid "This is the first iteration of this game. You can find the source code at [GitHub Repository ‚Äì gamemaker](https://github.com/shreyvivek/gamemaker)."
msgstr ""

#: Game
msgid "MH1812"
msgstr ""

#: Game
msgid "You can use this game as a template for your own game and add your own levels, if you are keen to learn more about Lean4."
msgstr ""
