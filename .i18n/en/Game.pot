msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Jul  2 06:41:02 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Assume and Finish"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Welcome!\n"
"\n"
"Let’s begin with the simplest task. If you're told `P` is true, then you can conclude `P`.\n"
"\n"
"Sounds trivial, but this teaches you how to use assumptions to finish a goal."
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Purpose: Use exact when you already have a proof of exactly what the goal is asking for.\n"
"\n"
"It closes the goal immediately if the term matches the goal’s type.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“Here's exactly what you're asking for — done!”\n"
"\n"
"If your goal is `P` and you have a proof of `P` (say `h : P`), then `exact h` completes the proof.\n"
"\n"
"To summarize:\n"
"\n"
"You have : `h : P`\n"
"Your goal : `P`\n"
"`exact h` will complete the proof!"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "let tactic yay!"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "assume tactic yay!"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "show tactic yay!"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Use the `exact` tactic with `«{h}»` to directly prove the goal `P`."
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "You’ve completed your first proof — and yes, it really was that simple!"
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Introduce Assumption"
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Let’s prove an implication: `P → P`. That is, if `P` holds, then `P` holds (trivially).\n"
"\n"
"This level introduces the `intro` tactic."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Purpose: Use intro to assume something — usually when proving an implication.\n"
"\n"
"If your goal is `P → Q`, `intro h` changes the goal to `Q` and gives you `h : P` as a local assumption.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“Let me assume `P` is true for now, and see if I can prove `Q`.”\n"
"Opens up an implication goal by introducing its assumption.\n"
"\n"
"To summarize:\n"
"\n"
"Your goal : `h : P → P`\n"
"After `intro h`,\n"
"you get an assumption `h : P` and your goal will just be `P`."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Use the `intro` tactic to assume `P` is true. Try `intro h`."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Now you have `«{h}» : P`, and your goal is `P`. Use `exact` to finish."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "That was a basic implication! The `intro` tactic is your go-to tool for these."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "And Introduction"
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "From `P` and `Q`, we can conclude `P ∧ Q`. That’s how conjunction works!\n"
"\n"
"You’ll learn the `constructor` tactic in this level."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Purpose: Use constructor when your goal is a conjunction (`P ∧ Q`).\n"
"\n"
"It splits the goal into two subgoals: one for `P`, and one for `Q`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“To prove both `P` and `Q`, let’s do them one at a time.”\n"
"\n"
"To summarize:\n"
"`constructor` on `P ∧ Q` gives you two sub goals — one for `P` and one for `Q`."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Use the `constructor` tactic to split the goal `P ∧ Q` into two parts."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Firstly, prove `P` using `«{hp}»` in the `Active Goal` to proceed to `Goal 2`\n"
"\n"
"Then, in `Goal 2`, prove `Q` using `«{hq}»`."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Nice work! You combined two truths into one solid conjunction."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "And Elimination (Left)"
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "If you know `P ∧ Q`, then you can extract `P` from it.\n"
"\n"
"We’ll use the `exact` tactic, combined with `.left`, described further below."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "As you know, the `exact` tactic finishes the goal using a term that exactly matches the target.\n"
"\n"
"If you have `h : P ∧ Q`, then:\n"
"- `h.left` gives you a term of type `P`\n"
"- `h.right` gives you a term of type `Q`\n"
"\n"
"These are not tactics, but useful expressions to pass to `exact`.\n"
"\n"
"Now you know what to do to extract the left part `P` from `P ∧ Q` using `exact`."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "Nicely done! You extracted the left side of a conjunction. A similar procedure can be followed to extract the right half of a conjunction."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Or Introduction (Left)"
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Let’s now turn to disjunctions — statements involving the word 'or'.\n"
"\n"
"In Lean, `P ∨ Q` means “either `P` is true, or `Q` is true (or both).”\n"
"To prove something like `P ∨ Q`, it’s enough to prove just one side — because *at least one must be true*.\n"
"\n"
"In this level, you already have a proof of `P`, and your goal is `P ∨ Q`.\n"
"So all you have to do is tell Lean: “I want to prove the left side of the disjunction”, as you can finish it off with your existing proof."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Purpose: Use `left` when your goal is a disjunction (`P ∨ Q`) and you want to prove the **left** part.\n"
"\n"
"If your goal is `P ∨ Q`, then `left` changes the goal to proving `P`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“I’ll prove the first part of the `or`, and that’s good enough.”\n"
"\n"
"To summarize:\n"
"\n"
"Your goal : `P ∨ Q`\n"
"After `left`, your new goal is just `P`"
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Use the `left` tactic to say `P ∨ Q` is true because `P` is true.\n"
"\n"
"**Note:** Here you are directly operating on the goal itself. So you just need to type `left` and Lean will understand."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Now you can finish the level yourself."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Great! You’ve learned how to state that “at least one is true.”"
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Or Introduction (Right)"
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "If `Q` is true, then `P ∨ Q` is also true — because *at least one* must hold.\n"
"\n"
"Now let’s learn how to use the `right` tactic."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Purpose: Use `right` when your goal is a disjunction (`P ∨ Q`) and you want to prove the **right** part.\n"
"\n"
"If your goal is `P ∨ Q`, then `right` changes the goal to proving `Q`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“I’ll prove the second part of the `or`, and that’s good enough.”\n"
"\n"
"To summarize:\n"
"\n"
"Your goal : `P ∨ Q`\n"
"After `right`, your new goal is just `Q`"
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Use the `right` tactic this time, to commit to proving `Q` instead of `P`."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Now you can finish the level yourself."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Great! You've now mastered both `left` and `right` tactics, and how they can be useful in a disjunction."
msgstr ""

#: Game.Levels.Propositional.L07_ModusPonens
msgid "Modus Ponens"
msgstr ""

#: Game.Levels.Propositional.L07_ModusPonens
msgid "Time to visit one of the most fundamental rules of inference: **Modus Ponens**.\n"
"\n"
"It says:\n"
"> If `P → Q` and `P` are both true, then `Q` must also be true.\n"
"\n"
"In Lean, this means:\n"
"- If you have `implication : P → Q`, and\n"
"- `fact : P`,\n"
"\n"
"then you can apply the implication to the fact to get `Q`.\n"
"\n"
"This is what we’ll do in this level:\n"
"You’re given `P → Q` and `P`, and your goal is to prove `Q`.\n"
"\n"
"You're going to make use of `apply` tactic.\n"
"Let’s break it down step by step."
msgstr ""

#: Game.Levels.Propositional.L07_ModusPonens
msgid "Purpose: Use `apply` to reduce your current goal to an earlier implication.\n"
"\n"
"If your goal is `Q`, and you have `implication : P → Q`,\n"
"then `apply implication` changes the goal to `P`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“To prove `Q`, it’s enough to prove `P` — because I already have `P → Q`.”"
msgstr ""

#: Game.Levels.Propositional.L07_ModusPonens
msgid "Modus Ponens: from `P → Q` and `P`, conclude `Q`."
msgstr ""

#: Game.Levels.Propositional.L07_ModusPonens
msgid "Your goal is Q, and you have an implication h₁ : P → Q.\n"
"\n"
"By writing apply h₁, you are telling Lean:\n"
"“To prove Q, it suffices to prove P.”\n"
"\n"
"That’s because P → Q works like a function:\n"
"If you give it P, it will return Q.\n"
"\n"
"So apply h₁ transforms your goal from Q to P,\n"
"and Lean now expects you to prove P.\n"
"\n"
"Now go ahead — apply the implication!"
msgstr ""

#: Game.Levels.Propositional.L07_ModusPonens
msgid "Now the goal has changed to `P`. You're being asked to prove the condition of the implication.\n"
"\n"
"Luckily, you already have `h₂ : P`. Use `exact` to finish!"
msgstr ""

#: Game.Levels.Propositional.L07_ModusPonens
msgid "Nicely done! You’ve applied **Modus Ponens** by thinking backwards from your goal.\n"
"\n"
"You told Lean: “To prove `Q`, I’ll use `P → Q`, so just give me `P`.”\n"
"\n"
"That’s the core idea behind the `apply` tactic — a major tool in your proof toolkit."
msgstr ""

#: Game.Levels.Propositional.L08_OrElimination
msgid "Or Elimination"
msgstr ""

#: Game.Levels.Propositional.L08_OrElimination
msgid "Suppose you want to prove a proposition `R`.\n"
"\n"
"You’re told that either `P` or `Q` is true (i.e., `P ∨ Q`).\n"
"But you don’t know which one — Lean won’t let you just pick one randomly.\n"
"\n"
"You’re also told that:\n"
"- If `P` is true, then `R` follows\n"
"- If `Q` is true, then `R` follows\n"
"_(we ignore the vacuously true cases, which you would have possibly learnt in lectures.)_\n"
"This means: no matter *which* side of the disjunction holds, `R` will be true either way.\n"
"To prove `R`, you need to split into two cases using the `cases` tactic — one where `P` is true, and one where `Q` is.\n"
"\n"
"Then, in each case, use the appropriate implication to show that `R` follows."
msgstr ""

#: Game.Levels.Propositional.L08_OrElimination
msgid "Purpose: Use `cases` on a disjunction (e.g. `P ∨ Q`) to split it into two separate cases.\n"
"\n"
"Each case creates a new assumption:\n"
"- `inl hp` means `P` is assumed true\n"
"- `inr hq` means `Q` is assumed true\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“Let’s examine both possible scenarios and show that the goal works either way.”\n"
"\n"
"To summarize:\n"
"\n"
"Given: `h : P ∨ Q`\n"
"After:\n"
"- Case 1: `hp : P`\n"
"- Case 2: `hq : Q`"
msgstr ""

#: Game.Levels.Propositional.L08_OrElimination
msgid "Use the `cases` tactic to break the disjunction `«{h}»` into two possible cases."
msgstr ""

#: Game.Levels.Propositional.L08_OrElimination
msgid "In this level, you will see how `exact` is used with a **theorem applied to an argument**.\n"
"\n"
"💡 Consider the `Active Goal`:\n"
"\n"
"You have:\n"
"- `h₁ : P → R` (an implication)\n"
"- `h_1 : P` (from a case)\n"
"\n"
"This should strike a bell, as this resembles the structure of Modus Ponens.\n"
"\n"
"Then `exact modus_ponens P R h₁ h_1` is a direct proof of `R`. It means: use `exact` on the result of modus ponens applied to h₁ and h_1, with propositions P and R.\n"
"\n"
"Even if u let P and R be underscores respectively, it would still not be an error.\n"
"\n"
"So you write:\n"
"\n"
"**exact modus_ponens P R h₁ h_1**\n"
"_for writing subscript 1, type h, enter a backslash and then enter 1._"
msgstr ""

#: Game.Levels.Propositional.L08_OrElimination
msgid "Here, Lean will check that:\n"
"\n"
"`h₁ : P → R`\n"
"`h_1 : P`\n"
"\n"
"Therefore `R` is concluded, which correctly matches what we want, `R`!\n"
"\n"
"Similarly, when `Q` holds, use `«{h₂}»` to conclude `R`."
msgstr ""

#: Game.Levels.Propositional.L08_OrElimination
msgid "You’ve completed a textbook disjunction elimination! You can also see how versatile the `exact` tactic is.\n"
"\n"
"By showing the goal holds in **both** branches of the `or`, you’ve logically proven it no matter what."
msgstr ""

#: Game.Levels.Propositional.L09_ImplicationChain
msgid "Implication Chain"
msgstr ""

#: Game.Levels.Propositional.L09_ImplicationChain
msgid "You’re given two facts:\n"
"\n"
"1. If `P` is true, then `Q` is true. (`P → Q`)\n"
"2. If `Q` is true, then `R` is true. (`Q → R`)\n"
"\n"
"Your task: prove that `P` implies `R` — in other words, show that `P → R`.\n"
"\n"
"This is called **chaining implications**. It’s a very common pattern in logic and proofs.\n"
"\n"
"The idea is:\n"
"“If `P` gives me `Q`, and `Q` gives me `R`, then `P` gives me `R`.”\n"
"\n"
"In this level, you’ll:\n"
"- assume `P` is true,\n"
"- use it to get `Q` via the first implication,\n"
"- and then use that `Q` to get `R` via the second implication.\n"
"\n"
"You’ll learn how to use the `have` tactic to break up and name intermediate steps — a powerful tool for writing clean, readable proofs.\n"
"\n"
"_**Note:** There can be many alternative ways to prove the same level, with tactics you may already know. If you are keen, try them out! PS: You will not be prompted with hints in that case :)_"
msgstr ""

#: Game.Levels.Propositional.L09_ImplicationChain
msgid "Purpose: Use `have` to create and name an intermediate result in your proof.\n"
"\n"
"It lets you:\n"
"- Break up long reasoning chains\n"
"- Improve clarity and structure\n"
"- Reuse partial results later\n"
"\n"
"### Example:\n"
"\n"
"If you have `h₁ : P → Q` and `hp : P`, and you want to reach `R`, you can write:\n"
"\n"
"`have hq : Q := modus_ponens _ _ h₁ hp`\n"
"\n"
"Now you have `hq : Q`, which you can use in the next line with `h₂ : Q → R`:\n"
"\n"
"`exact modus_ponens _ _ h₂ hq`\n"
"\n"
"This is useful when proofs grow longer or when you want to give names to intermediate steps to reason about them clearly."
msgstr ""

#: Game.Levels.Propositional.L09_ImplicationChain
msgid "Quite obvious, you can start with `intro`."
msgstr ""

#: Game.Levels.Propositional.L09_ImplicationChain
msgid "One way to go ahead is to use the exact statement by writing something like `exact modus_ponens Q R h₂ (modus_ponens P Q h₁ a)`\n"
"\n"
"Looks complicated, and I hope you aren't too confused, because there's an amazing tactic to use here. Read about the `have` tactic on the right.\n"
"\n"
"**Note** that the `have` tactic is strict on syntax, but it simplifies your task in seconds!"
msgstr ""

#: Game.Levels.Propositional.L09_ImplicationChain
msgid "Perfect! You used the have tactic to extract Q from P → Q, and then concluded R cleanly.\n"
"\n"
"This kind of structured chaining is essential in longer proofs — well done!"
msgstr ""

#: Game.Levels.Propositional.L10_NegationIntroduction
msgid "Negation Introduction"
msgstr ""

#: Game.Levels.Propositional.L10_NegationIntroduction
msgid "You’re now going to prove something of the form `¬P`.\n"
"\n"
"What does that mean?\n"
"\n"
"> `¬P` is just shorthand for `P → False`.\n"
"\n"
"So, to prove `¬P`, you must:\n"
"1. Assume `P`\n"
"2. Derive a contradiction (i.e., prove `False`)\n"
"3. That shows `P` can’t be true — which proves `¬P`\n"
"\n"
"This is called **negation introduction** — a foundational pattern in proof by contradiction.\n"
"\n"
"In this level, you're given:\n"
"- `h : P → False`\n"
"And your goal is to prove `¬P`.\n"
"\n"
"Let’s walk through how to unpack and apply this."
msgstr ""

#: Game.Levels.Propositional.L10_NegationIntroduction
msgid "Your goal is `¬P`, which is just `P → False`. Use `intro` to assume that `P` holds."
msgstr ""

#: Game.Levels.Propositional.L10_NegationIntroduction
msgid "Now your goal is to prove `False`. You have `assumed_p : P`, and a function `h : P → False`."
msgstr ""

#: Game.Levels.Propositional.L10_NegationIntroduction
msgid "`_____ _________ __ __`. By now, you should know what to fill in the blanks! Eventually, it will give you `False`."
msgstr ""

#: Game.Levels.Propositional.L10_NegationIntroduction
msgid "This shows that assuming `P` leads to `False`, which proves `¬P`."
msgstr ""

#: Game.Levels.Propositional.L10_NegationIntroduction
msgid "You’ve introduced negation: `¬P` is proven by assuming `P` is true itself. Something like the proof by contradiction, whose applications you would have seen earlier in your math classes.\n"
"\n"
"There is no right or wrong method, use whatever you find more comfortable. After all, the objective of this game is to build that intuition in proving everyday statements/theorems you encounter in math."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Modus Tollens"
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "This level introduces another classic rule of inference: **Modus Tollens**.\n"
"\n"
"You may recall from Level 7 (**Modus Ponens**) that:\n"
"> If `P → Q` and `P` are true, then `Q` is true.\n"
"Now imagine the opposite:\n"
"> If `P → Q` and `Q` is **false**, then `P` must also be false.\n"
"\n"
"That’s **Modus Tollens**.\n"
"Let’s break it down logically:\n"
"\n"
"You’re given:\n"
"- `implication : P → Q`\n"
"- `not_q : ¬Q` (i.e., `Q → False`)\n"
"Your goal is:\n"
"- `¬P` (i.e., `P → False`)\n"
"\n"
"This means:\n"
"“Assume `P`. Then use `P → Q` to get `Q`, and then use `¬Q` to show that `Q` leads to `False` — which proves `¬P`.”\n"
"Notice how this structure is **very similar to Level 10 (Negation Introduction)**:\n"
"- You assume something (`P`)\n"
"- Derive a contradiction\n"
"- Conclude its negation\n"
"But here, you must **chain implications across two steps**:\n"
"`P → Q`, then `Q → False`, to eventually get `P → False`.\n"
"\n"
"Let’s walk through this chain and build the logic slowly."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Modus Tollens: from `Q → P` and `¬P`, conclude `¬Q`."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Start by using `intro` to assume that `P` holds. This is needed to prove `¬P`, or `P → False`."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Your goal is now `False`. Since you have `h₂ : Q → False`, you can use `apply h₂` to reduce the goal to `Q`."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Now your goal is `Q`, and you have `h₁ : P → Q` and `hp : P`."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Use `apply h₁` to reduce the goal to proving `P`, which you already assumed initially."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Now your goal is `P`, and you already have `hp`."
msgstr ""

#: Game.Levels.Propositional.L11_ModusTollens
msgid "Well done! You’ve just used **Modus Tollens** with a clean chain of `apply` steps.\n"
"\n"
"This level showed how `apply` works **in reverse**:\n"
"- From `False`, you worked backwards through `Q → False` and `P → Q` to reduce everything to `P`, which you already had.\n"
"\n"
"This step-by-step approach gives you precise control over each part of the logic."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "Contrapositive"
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "You may remember that every implication `P → Q`\n"
"is **logically equivalent** to its contrapositive: `¬Q → ¬P`.\n"
"\n"
"This means:\n"
"> If `P → Q`, then `¬Q → ¬P` is also true.\n"
"\n"
"You’ve already seen this idea in Level 11 (Modus Tollens):\n"
"- If `P → Q` and `Q` is false, then `P` must be false.\n"
"\n"
"In this level, you’re going to prove the general version:\n"
"Given only `P → Q`, show that `¬Q → ¬P`.\n"
"\n"
"Let’s unpack this step by step."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "To prove `¬Q → ¬P`, first recognize that it's shorthand for `(Q → False) → (P → False)`."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "That means this is a **nested implication**, so we’ll need to assume both `¬Q` and `P` before we can prove `False`."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "`not_q` now holds: you’re assuming `Q → False`. Now to prove `¬P`, we must show `P → False` — so assume `P` next via `intro assumed_p`."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "Your goal is now `False`. Think: how do you reach a contradiction from `P`?"
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "You have `h : P → Q`, and you also assumed `P` as `assumed_p`. So, from those two, you can get `Q`."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "But your goal is `False`, and you have `not_q : Q → False`. This gives you a strategy: apply `not_q` to change the goal to a proof of `Q`."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "You now need to prove `Q`, and you have `h : P → Q` and `assumed_p : P`. This is a perfect setup for `apply` again."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "Now the goal is `P`, and you already have `assumed_p : P`. Use `exact assumed_p` to finish."
msgstr ""

#: Game.Levels.Propositional.L12_Contrapositive
msgid "Awesome! You've just proven the **contrapositive** form of an implication — an essential logical equivalence.\n"
"\n"
"Though this level was heavy on hints, it brought together everything you’ve learned:\n"
"- You used `intro` to build nested assumptions\n"
"- You used `apply` to break apart implications\n"
"- And you combined all the pieces to reach a contradiction\n"
"\n"
"This is real formal logic — and you're solving it in Lean. 🔥"
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "Disjunctive Syllogism"
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "In this level, you’ll prove a very common logical inference called **Disjunctive Syllogism**.\n"
"\n"
"It works like this:\n"
"\n"
"> If `P ∨ Q` is true, and `P` is false, then `Q` must be true.\n"
"\n"
"This makes sense — `P ∨ Q` tells us that at least one of them is true.\n"
"If we know that `P` is *not* true (`¬P`), then `Q` is the only possibility left.\n"
"\n"
"This combines what you did in earlier levels:\n"
"- In Level 8, you used `cases` to break apart a disjunction\n"
"- In Level 10, you learned that `¬P` means `P → False`\n"
"- In Level 11, you used contradiction (`False`) to complete a proof\n"
"\n"
"Now you’ll combine all of those tools into one elegant move.\n"
"You also make use of another theorem to achieve this. Read about `False.elim` on the Theorems section!"
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "`False.elim` — From Contradiction, Anything Follows\n"
"it is of the type False.elim : False → α\n"
"\n"
"**Meaning:**\n"
"\n"
"If you have a contradiction (`False`), you can conclude *any* proposition — even something unrelated.\n"
"\n"
"This is based on a principle in classical logic called “**Explosion**”, which states:\n"
"\n"
"Once you reach False, your system has broken, and anything can be proven.\n"
"\n"
"**Intuition:**\n"
"\n"
"Think of False as a logical dead-end or crash.\n"
"\n"
"Once you've proven something impossible, the rules no longer restrict you.\n"
"\n"
"So Lean allows you to conclude any goal using False.elim.\n"
"\n"
"example (P Q : Prop) (h₁ : P) (h₂ : ¬P) : Q :=\n"
"\n"
"  False.elim (h₂ h₁)\n"
"\n"
"**Explanation:**\n"
"\n"
"`h₁ : P`\n"
"\n"
"`h₂ : ¬P`, i.e., `P → False`\n"
"\n"
"Applying `h₂ h₁` gives a `contradiction: False`\n"
"\n"
"Then `False.elim` produces a proof of `Q`, finishing the goal\n"
"\n"
"**When to use:**\n"
"\n"
"We use `False.elim` when we've reached a contradiction, but our goal is something else — like `Q`.\n"
"\n"
"Suppose you've reached a point in your proof where you have:\n"
"\n"
"`f : False`\n"
"\n"
"That means a contradiction has occurred.\n"
"\n"
"Lean now gives you the power to conclude anything, including your goal `Q`, because from a contradiction, any statement is considered logically valid.\n"
"\n"
"You finish the proof like this:\n"
"\n"
"`exact False.elim f`\n"
"\n"
"It tells Lean: “Since `False` is true here, I can conclude whatever I want — including `Q`.\n"
"\n"
"While it may seem absurd, it follows the principle of *Explosion*, as mentioned earlier”"
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "Use `cases h` to consider the two possible cases: `P` or `Q`."
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "You are now in the case where `P` is true. But you also have `not_p : P → False`, so this leads to a contradiction."
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "A compound exact statement enclosed in `()` should help to get a contradiction (`False`)."
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "Then use `False.elim` to derive your goal `Q` from that contradiction using `exact False.elim (whatever you think the compound statement is)."
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "`Q` holds directly here. Use `exact` to finish the proof."
msgstr ""

#: Game.Levels.Propositional.L13_DisjunctiveSyllogism
msgid "Nicely done! You've applied **Disjunctive Syllogism** in this level, showing you how to:\n"
"- Split logical cases with `cases`\n"
"- Detect contradictions using `¬P`\n"
"- Escape contradictions using `False.elim`\n"
"\n"
"You’re now handling propositional logic like a pro."
msgstr ""

#: Game.Levels.Propositional.L14_Dilemma
msgid "Dilemma"
msgstr ""

#: Game.Levels.Propositional.L14_Dilemma
msgid "This is the **Constructive Dilemma**:\n"
"\n"
"From `P ∨ Q`, `P → R`, and `Q → R`, you can conclude `R`.\n"
"\n"
"It's case-based reasoning again."
msgstr ""

#: Game.Levels.Propositional.L14_Dilemma
msgid "Use `cases` on `«{hpq}»` to consider each possibility."
msgstr ""

#: Game.Levels.Propositional.L14_Dilemma
msgid "Now, `P` holds. Use `«{hpr}»` to conclude `R`."
msgstr ""

#: Game.Levels.Propositional.L14_Dilemma
msgid "After that, `Goal 2` contains the scenario where `Q` holds. Use `«{hqr}»` to conclude `R`."
msgstr ""

#: Game.Levels.Propositional.L14_Dilemma
msgid "Also, Lean is really smart. The `exact` tactic is so versatile that both `exact modus_ponens _ _ a b` and `exact a b` mean the same."
msgstr ""

#: Game.Levels.Propositional.L14_Dilemma
msgid "Excellent! You've completed the Constructive Dilemma — a powerful inference rule using `∨`."
msgstr ""

#: Game.Levels.Propositional.L15_HandsOn
msgid "Hands On"
msgstr ""

#: Game.Levels.Propositional.L15_HandsOn
msgid "You've learned some of the core tactics:\n"
"- `intro` to assume\n"
"- `apply` to break down implications\n"
"- `exact` to close goals\n"
"\n"
"In this level, you’ll combine multiple implications to reach a goal.\n"
"All the theorems you’ve proved so far are available — so use them!\n"
"\n"
"Try to:\n"
"- Think in chains\n"
"- Finish clearly\n"
"\n"
"(Pun intended) _Lean_ on what you know. You’ve got this!"
msgstr ""

#: Game.Levels.Propositional.L15_HandsOn
msgid "First you need to assume `A`."
msgstr ""

#: Game.Levels.Propositional.L15_HandsOn
msgid "Your goal is now `D`. Reduce it to `C`."
msgstr ""

#: Game.Levels.Propositional.L15_HandsOn
msgid "Now your goal is `C`. Reduce it to `B`."
msgstr ""

#: Game.Levels.Propositional.L15_HandsOn
msgid "Finish the level now!."
msgstr ""

#: Game.Levels.Propositional.L15_HandsOn
msgid "You’ve just walked through a chain of reasoning — turning `A → B → C → D` into `A → D`.\n"
"\n"
"This level shows how powerful basic implication chaining is — and how all the tactics you’ve learned work together.\n"
"\n"
"With that, we have come to the end of this World. Click on the Home button at the top to explore other worlds."
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "Propositional Logic"
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "In this world, you'll explore the foundations of propositional logic.\n"
"\n"
"Each level presents a new fundamental theorem or principle.\n"
"\n"
"Before you start, take note of the panel on the right (if you are on PC). You can find the documentations/descriptions for several **Tactics** we will be making use of, and **Theorems** we will be proving(_and using_) in this World. Click on them, whether locked or unlocked, to read and understand! You are encouraged to do so whenever you are prompted to use a tactic in the game.\n"
"\n"
"Click on the `Start` button to begin!"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "From And to Implication"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "You’re given a conjunction and an implication.\n"
"\n"
"Your task: extract the right part and trigger the implication."
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use exact when you already have a proof of exactly what the goal is asking for.\n"
"\n"
"It closes the goal immediately if the term matches the goal’s type.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“Here's exactly what you're asking for — done!”\n"
"\n"
"If your goal is `P` and you have a proof of `P` (say `h : P`), then `exact h` completes the proof.\n"
"\n"
"To summarize:\n"
"\n"
"You have : `h : P`\n"
"Your goal : `P`\n"
"`exact h` will complete the proof!"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use intro to assume something — usually when proving an implication.\n"
"\n"
"If your goal is `P → Q`, `intro h` changes the goal to `Q` and gives you `h : P` as a local assumption.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“Let me assume `P` is true for now, and see if I can prove `Q`.”\n"
"Opens up an implication goal by introducing its assumption.\n"
"\n"
"To summarize:\n"
"\n"
"Your goal : `h : P → P`\n"
"After `intro h`,\n"
"you get an assumption `h : P` and your goal will just be `P`."
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use constructor when your goal is a conjunction (`P ∧ Q`).\n"
"\n"
"It splits the goal into two subgoals: one for `P`, and one for `Q`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“To prove both `P` and `Q`, let’s do them one at a time.”\n"
"\n"
"To summarize:\n"
"`constructor` on `P ∧ Q` gives you two sub goals — one for `P` and one for `Q`."
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use `left` when your goal is a disjunction (`P ∨ Q`) and you want to prove the **left** part.\n"
"\n"
"If your goal is `P ∨ Q`, then `left` changes the goal to proving `P`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“I’ll prove the first part of the `or`, and that’s good enough.”\n"
"\n"
"To summarize:\n"
"\n"
"Your goal : `P ∨ Q`\n"
"After `left`, your new goal is just `P`"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use `right` when your goal is a disjunction (`P ∨ Q`) and you want to prove the **right** part.\n"
"\n"
"If your goal is `P ∨ Q`, then `right` changes the goal to proving `Q`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“I’ll prove the second part of the `or`, and that’s good enough.”\n"
"\n"
"To summarize:\n"
"\n"
"Your goal : `P ∨ Q`\n"
"After `right`, your new goal is just `Q`"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use `apply` to reduce your current goal to an earlier implication.\n"
"\n"
"If your goal is `Q`, and you have `implication : P → Q`,\n"
"then `apply implication` changes the goal to `P`.\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“To prove `Q`, it’s enough to prove `P` — because I already have `P → Q`.”"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use `cases` on a disjunction (e.g. `P ∨ Q`) to split it into two separate cases.\n"
"\n"
"Each case creates a new assumption:\n"
"- `inl hp` means `P` is assumed true\n"
"- `inr hq` means `Q` is assumed true\n"
"\n"
"📌 Think of it as:\n"
"\n"
"“Let’s examine both possible scenarios and show that the goal works either way.”\n"
"\n"
"To summarize:\n"
"\n"
"Given: `h : P ∨ Q`\n"
"After:\n"
"- Case 1: `hp : P`\n"
"- Case 2: `hq : Q`"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "`False.elim` — From Contradiction, Anything Follows\n"
"it is of the type False.elim : False → α\n"
"\n"
"**Meaning:**\n"
"\n"
"If you have a contradiction (`False`), you can conclude *any* proposition — even something unrelated.\n"
"\n"
"This is based on a principle in classical logic called “**Explosion**”, which states:\n"
"\n"
"Once you reach False, your system has broken, and anything can be proven.\n"
"\n"
"**Intuition:**\n"
"\n"
"Think of False as a logical dead-end or crash.\n"
"\n"
"Once you've proven something impossible, the rules no longer restrict you.\n"
"\n"
"So Lean allows you to conclude any goal using False.elim.\n"
"\n"
"example (P Q : Prop) (h₁ : P) (h₂ : ¬P) : Q :=\n"
"\n"
"  False.elim (h₂ h₁)\n"
"\n"
"**Explanation:**\n"
"\n"
"`h₁ : P`\n"
"\n"
"`h₂ : ¬P`, i.e., `P → False`\n"
"\n"
"Applying `h₂ h₁` gives a `contradiction: False`\n"
"\n"
"Then `False.elim` produces a proof of `Q`, finishing the goal\n"
"\n"
"**When to use:**\n"
"\n"
"We use `False.elim` when we've reached a contradiction, but our goal is something else — like `Q`.\n"
"\n"
"Suppose you've reached a point in your proof where you have:\n"
"\n"
"`f : False`\n"
"\n"
"That means a contradiction has occurred.\n"
"\n"
"Lean now gives you the power to conclude anything, including your goal `Q`, because from a contradiction, any statement is considered logically valid.\n"
"\n"
"You finish the proof like this:\n"
"\n"
"`exact False.elim f`\n"
"\n"
"It tells Lean: “Since `False` is true here, I can conclude whatever I want — including `Q`.\n"
"\n"
"While it may seem absurd, it follows the principle of *Explosion*, as mentioned earlier”"
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "Purpose: Use `have` to create and name an intermediate result in your proof.\n"
"\n"
"It lets you:\n"
"- Break up long reasoning chains\n"
"- Improve clarity and structure\n"
"- Reuse partial results later\n"
"\n"
"### Example:\n"
"\n"
"If you have `h₁ : P → Q` and `hp : P`, and you want to reach `R`, you can write:\n"
"\n"
"`have hq : Q := modus_ponens _ _ h₁ hp`\n"
"\n"
"Now you have `hq : Q`, which you can use in the next line with `h₂ : Q → R`:\n"
"\n"
"`exact modus_ponens _ _ h₂ hq`\n"
"\n"
"This is useful when proofs grow longer or when you want to give names to intermediate steps to reason about them clearly."
msgstr ""

#: Game.Levels.Exercises_Propositional.L01_PracticeProp
msgid "You extracted `P` from the conjunction and applied the implication to reach `R`. Nicely done!"
msgstr ""

#: Game.Levels.Exercises_Propositional.ProofHelpers
msgid "Modus Tollens: from `Q → P` and `¬P`, conclude `¬Q`."
msgstr ""

#: Game.Levels.Exercises_Propositional.ProofHelpers
msgid "Modus Ponens: from `P → Q` and `P`, conclude `Q`."
msgstr ""

#: Game.Levels.Exercises_Propositional.L02_PracticeProp
msgid "Modus Chain Attack"
msgstr ""

#: Game.Levels.Exercises_Propositional.L02_PracticeProp
msgid "Apply both **Modus Tollens** and **Modus Ponens** in a clean logical chain.\n"
"\n"
"Hint: Make use of the `have` tactic wherever necessary, or a nested `exact` chain!"
msgstr ""

#: Game.Levels.Exercises_Propositional.L02_PracticeProp
msgid "Excellent. You combined two powerful rules — **Modus Tollens** and **Modus Ponens** — using structured steps."
msgstr ""

#: Game.Levels.Exercises_Propositional.Exercises_Propositional
msgid "Exercises - Propositional"
msgstr ""

#: Game.Levels.Exercises_Propositional.Exercises_Propositional
msgid "In this world, you'll try out some exercises on propositional logic, based on the knowledge gained so far.\n"
"\n"
"Before you start, take note of the panel on the right (if you are on PC). You can find the documentations/descriptions for several **Tactics** we will be making use of, and **Theorems** we will be proving(_and using_) in this World. Click on them, whether locked or unlocked, to read and understand! You are encouraged to do so whenever you are prompted to use a tactic in the game.\n"
"\n"
"Click on the `Start` button to begin!"
msgstr ""

#: Game
msgid "Discrete Mathematics with Lean4"
msgstr ""

#: Game
msgid "Welcome to **Discrete Math with Lean4**, an interactive game that will help you in proving several theorems of **Discrete Mathematics**\n"
"\n"
"**What is Lean?**\n"
"\n"
"Lean is a powerful tool used to write and verify mathematical proofs using code. It’s like a super-charged calculator for logic — you tell Lean the rules and what you want to prove, and it checks every single step for correctness. Unlike doing math on paper (which can be vague), Lean makes sure there are no gaps or mistakes. It’s used by mathematicians, computer scientists, and even students to write formal, checkable proofs.\n"
"\n"
"Lean 4 is the latest version of the Lean theorem prover. It introduces a faster engine, better syntax, and allows users to build interactive proof environments — like this game! Lean 4 also supports general-purpose programming, making it both a proof assistant and a full programming language. You can define logic, prove theorems, and even build applications — all in one system.\n"
"\n"
"**What is this game all about?**\n"
"\n"
"This is a proof-based puzzle game built with Lean 4. Each level is a logic challenge. You solve it by using _tactics_ — special instructions that Lean understands (just like any other programming language understanding its own syntax) — to complete proofs step by step.\n"
"\n"
"Click on the World `Propositional`, to get started!"
msgstr ""

#: Game
msgid "This is the first iteration of this game. You can find the source code at [GitHub Repository – gamemaker](https://github.com/shreyvivek/gamemaker)."
msgstr ""

#: Game
msgid "MH1812"
msgstr ""

#: Game
msgid "You can use this game as a template for your own game and add your own levels, if you are keen to learn more about Lean4."
msgstr ""
