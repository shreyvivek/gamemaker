msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Tue Jun 24 16:54:47 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Assume and Finish"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Let‚Äôs begin with the simplest task. If you're told `P` is true, then you can conclude `P`.\n"
"\n"
"This teaches you how to use assumptions to finish a goal."
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Closes the current goal using the exact term you provide.\n"
"\n"
"If your goal is `P` and you have a proof of `P` (say `h : P`), then `exact h` completes the proof.\n"
"\n"
"It‚Äôs like saying: ‚ÄúHere‚Äôs exactly what you asked for.‚Äù"
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "If you know `P`, then you can conclude `P`."
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "Use the `exact` tactic with `¬´{h}¬ª` to directly prove the goal `P`."
msgstr ""

#: Game.Levels.Propositional.L01_AssumeAndFinish
msgid "You‚Äôve completed your first proof ‚Äî and yes, it really was that simple!"
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Introduce Assumption"
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Let‚Äôs prove an implication: `P ‚Üí P`. That is, if `P` holds, then `P` holds (trivially).\n"
"\n"
"This level introduces the `intro` tactic."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Opens up an implication goal by introducing its assumption.\n"
"\n"
"If your goal is `P ‚Üí Q`, `intro h` changes the goal to `Q` and gives you `h : P` as a local assumption.\n"
"\n"
"Think of it like: ‚ÄúLet‚Äôs suppose `P` is true.‚Äù"
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "From the assumption `P`, conclude `P`."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Use the `intro` tactic to assume `P` is true."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "Now you have `¬´{h}¬ª : P`, and your goal is `P`. Use `exact` to finish."
msgstr ""

#: Game.Levels.Propositional.L02_IntroduceAssumption
msgid "That was a basic implication! The `intro` tactic is your go-to tool for these."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "And Introduction"
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "From `P` and `Q`, we can conclude `P ‚àß Q`. That‚Äôs how conjunction works!\n"
"\n"
"You‚Äôll learn the `constructor` tactic in this level."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Used when the goal is a compound proposition like `P ‚àß Q`.\n"
"\n"
"It splits the goal into proving both components separately.\n"
"\n"
"For example: `constructor` on `P ‚àß Q` gives you two goals ‚Äî one for `P` and one for `Q`."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "From `P` and `Q`, derive `P ‚àß Q`."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Use the `constructor` tactic to split the goal `P ‚àß Q` into two parts."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Now prove `P` using `¬´{hp}¬ª`."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Now prove `Q` using `¬´{hq}¬ª`."
msgstr ""

#: Game.Levels.Propositional.L03_AndIntroduction
msgid "Nice work! You combined two truths into one solid conjunction."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "And Elimination (Left)"
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "If you know `P ‚àß Q`, then you can extract `P` from it.\n"
"\n"
"Let‚Äôs see how to do that with `.left`."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "If you have `h : P ‚àß Q`, then:\n"
"\n"
"- `h.left` gives you a proof of `P`.\n"
"- `h.right` gives you a proof of `Q`.\n"
"\n"
"They‚Äôre used to ‚Äúunpack‚Äù conjunctions."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "From `P ‚àß Q`, derive `P`."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "Use `h.left` to extract the left part `P` from `P ‚àß Q`."
msgstr ""

#: Game.Levels.Propositional.L04_AndEliminationLeft
msgid "Nicely done! You extracted the left side of a conjunction. A similar procedure can be followed to extract the right half of a conjunction."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Or Introduction (Left)"
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "If you know `P`, then you can conclude `P ‚à® Q`.\n"
"\n"
"Let‚Äôs introduce disjunction using the `left` tactic."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "For disjunctions (`P ‚à® Q`):\n"
"\n"
"- `left` means: ‚ÄúI‚Äôll prove `P`, and that‚Äôs enough.‚Äù\n"
"- `right` means: ‚ÄúI‚Äôll prove `Q`, and that‚Äôs enough.‚Äù\n"
"\n"
"Use `left` when you have a proof of `P`, and `right` when you have a proof of `Q`."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "From `P`, derive `P ‚à® Q`."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Use the `left` tactic to say `P ‚à® Q` is true because `P` is true."
msgstr ""

#: Game.Levels.Propositional.L05_OrIntroductionLeft
msgid "Great! You‚Äôve learned how to state that ‚Äúat least one is true.‚Äù"
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Or Introduction (Right)"
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "If `Q` is true, then `P ‚à® Q` is also true ‚Äî because *at least one* must hold.\n"
"\n"
"Now let‚Äôs learn how to use the `right` tactic."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Repeated for clarity.\n"
"\n"
"For disjunctions (`P ‚à® Q`):\n"
"\n"
"- `left` means: ‚ÄúI‚Äôll prove `P`, and that‚Äôs enough.‚Äù\n"
"- `right` means: ‚ÄúI‚Äôll prove `Q`, and that‚Äôs enough.‚Äù\n"
"\n"
"Use `left` when you have a proof of `P`, and `right` when you have a proof of `Q`."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "From `Q`, derive `P ‚à® Q`."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Use the `right` tactic this time, to commit to proving `Q` instead of `P`."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Now finish the proof by showing `Q` holds using `¬´{h}¬ª`."
msgstr ""

#: Game.Levels.Propositional.L06_OrIntroductionRight
msgid "Great! You've mastered both left and right disjunction introduction."
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "Propositional Logic"
msgstr ""

#: Game.Levels.Propositional.Propositional
msgid "In this world, you'll explore the foundations of propositional logic.\n"
"\n"
"Each level presents a new fundamental theorem or principle.\n"
"\n"
"Click on the button at the bottom left to continue."
msgstr ""

#: Game
msgid "Discrete Mathematics with Lean4"
msgstr ""

#: Game
msgid "Welcome to **Discrete Math with Lean4**, a fun and interactive game that will help you in proving several theorems **MH1812 - Discrete Mathematics**\n"
"\n"
"There are several levels that you can try out in each world. Each level essentially covers a theorem taught in the lecture. And you have many such levels queued up in a world.\n"
"Start by clicking on **Propositional** on the right."
msgstr ""

#: Game
msgid "This is the first iteration of this game. You can find the source code at [GitHub Repository ‚Äì gamemaker](https://github.com/shreyvivek/gamemaker)."
msgstr ""

#: Game
msgid "MH1812"
msgstr ""

#: Game
msgid "You can use this game as a template for your own game and add your own levels, if you are keen to learn more about Lean4."
msgstr ""
